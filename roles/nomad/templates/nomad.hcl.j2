datacenter = "{{ nomad_datacenter_name }}"
data_dir = "{{ __nomad_data_dir }}"
name = "{{ inventory_hostname | regex_replace('\.','-') }}"

tls {
  http = true
  rpc  = true
  ca_file     = "{{ nomad_ca_certificate }}"
  cert_file   = "{{ __nomad_self_certificate }}"
  key_file    = "{{ __nomad_self_private_key }}"
}

advertise {
  http = "{{ nomad_advertise_addr }}"
}

telemetry {
  collection_interval = "1s"
  disable_hostname = true
  prometheus_metrics = true
  publish_allocation_metrics = true
  publish_node_metrics = true
}

acl {
  enabled = true
}

{% if __nomad_is_mono_node %}
#
# BEGIN - mono-node configuration
#
consul {
  token        = "{{ __nomad_is_master | ternary(consul_connect_token_server, consul_connect_token_client) }}"
  ssl          = true
  verify_ssl   = true
  address      = "{{ nomad_consul_address }}"
  grpc_address = "{{ nomad_consul_grpc_address }}"
  checks_use_advertise = true
}

server {
    enabled = true
    bootstrap_expect = {{ nomad_bootstrap_expect }}
    encrypt = "{{ __nomad_encrypt_key }}"
}

client {
  enabled = true

{% for nomad_volume in nomad_volumes %}
  host_volume "{{ nomad_volume.name }}" {
    path      = "{{ nomad_volume.path }}"
    read_only = {{ nomad_volume.read_only | string | lower }}
  }
{% endfor %}

  meta {    
    "connect.sidecar_image" = "{{ nomad_connect_image }}"  
    "connect.gateway_image" = "{{ nomad_connect_image }}"  
    "connect.log_level" = "debug"
  }
}

{% if __nomad_vault_integration %}
vault {
  enabled = true
  address = "{{ nomad_vault_address }}"
  task_token_ttl = "1h"
  create_from_role = "nomad_cluster"
  token = "{{ nomad_vault_token }}"
}
{% endif %}

plugin "docker" {
  config {
    volumes {
      enabled      = true
    }
  }
}

plugin "raw_exec" {
  config {
    enabled = true
  }
}
#
# END - mono-node configuration
#
{% elif __nomad_is_master %}
#
# BEGIN - master-only configuration
#
consul {
  token        = "{{ __nomad_is_master | ternary(consul_connect_token_server, consul_connect_token_client) }}"
  ssl          = true
  verify_ssl   = true
  address      = "{{ nomad_consul_address }}"
  grpc_address = "{{ nomad_consul_grpc_address }}"
}

{% if __nomad_vault_integration %}
vault {
  enabled = true
  address = "{{ nomad_vault_address }}"
  task_token_ttl = "1h"
  create_from_role = "nomad_cluster"
  token = "{{ nomad_vault_token }}"
}
{% endif %}

server {
    enabled = true
    bootstrap_expect = {{ nomad_bootstrap_expect }}
    encrypt = "{{ __nomad_encrypt_key }}"
}

client {
  enabled = false
}
#
# END - master-only configuration
#
{% else %}
#
# BEGIN - minion-only configuration
#
consul {
  token        = "{{ __nomad_is_master | ternary(consul_connect_token_server, consul_connect_token_client) }}"
  ssl          = true
  verify_ssl   = true
  address      = "{{ nomad_consul_address }}"
  grpc_address = "{{ nomad_consul_grpc_address }}"
}

{% if __nomad_vault_integration %}
vault {
  enabled = true
  address = "{{ nomad_vault_address }}"
  task_token_ttl = "1h"
}
{% endif %}

client {
  enabled = true

{% for nomad_volume in nomad_volumes %}
  host_volume "{{ nomad_volume.name }}" {
    path      = "{{ nomad_volume.path }}"
    read_only = {{ nomad_volume.read_only | string | lower }}
  }
{% endfor %}

  meta {    
    "connect.sidecar_image" = "{{ nomad_connect_image }}"  
    "connect.gateway_image" = "{{ nomad_connect_image }}"  
    "connect.log_level" = "debug"
  }

  options {
    "docker.cleanup.image" = "false"
  }
}

plugin "docker" {
  config {
    volumes {
      enabled      = true
    }
  }
}

plugin "raw_exec" {
  config {
    enabled = true
  }
}
#
# END - minion-only configuration
#
{% endif %}
