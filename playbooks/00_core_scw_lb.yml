---
- name: Gather platform facts
  hosts: "{{ lookup('env', 'HS_WORKSPACE') }}_cluster"
  gather_facts: false
  become: true

  pre_tasks:
    - name: "Wait for ssh to wake up"
      wait_for_connection:
        timeout: 300
        sleep: 10

  tasks:
    - name: Gather facts until private network dhcp occurs
      setup:
      until: ansible_default_ipv4.interface == "ens5"
      retries: 10
      delay: 30


- hosts: localhost
  become: false
  gather_facts: false

  vars:
    tf_module_name: "core_scw_lb"

  tasks:
    - name: Variable cooking
      set_fact:
        masters_private_ipv4: |-
          {{
            hostvars
            | dict2items
            | selectattr('key', 'in', groups[lookup('env', 'HS_WORKSPACE') + '_masters'])
            | map(attribute='value.ansible_default_ipv4.address')
            | list
          }}
        minions_private_ipv4: |-
          {{
            hostvars
            | dict2items
            | selectattr('key', 'in', groups[lookup('env', 'HS_WORKSPACE') + '_minions'])
            | map(attribute='value.ansible_default_ipv4.address')
            | list
          }}

    - import_tasks: "{{ playbook_dir }}/inc/_tf_sanity_checks.yml"

    - name: Copy terraform sources    # noqa risky-file-permissions
      copy:
        src: "{{ tf_module_src }}"
        dest: "{{ tf_module_dest }}"
      when: tf_action == 'apply'

    - name: COMMON - Do Terraform
      community.general.terraform:
        project_path: "{{ tf_module_dest }}"
        state: "{{ (tf_action == 'destroy') | ternary('absent', 'present') }}"
        force_init: true
        workspace: "{{ hs_workspace }}"
        variables:
          apps_lb_domain: "apps.{{ hostvars[hs_workspace + '-master-01'].public_domain }}"
          private_network_id: "{{ hostvars[hs_workspace + '-master-01'].private_network_id }}"
          masters_private_ipv4: "{{ masters_private_ipv4 | to_json }}"
          minions_private_ipv4: "{{ minions_private_ipv4 | to_json }}"
          cert_path: "{{ hostvars[lookup('env', 'HS_WORKSPACE') + '-master-01'].vault_node_cert_fullchain }}"
          cert_key_path: "{{ hostvars[lookup('env', 'HS_WORKSPACE') + '-master-01'].vault_node_cert_private_key }}"
      register: tf_result
      tags: tf

    - name: APPLY - Terraform output extract
      set_fact:
        apps_lb_ip: "{{ tf_result.outputs.apps_lb_ip.value }}"
      when: tf_action == 'apply'


- hosts: "{{ lookup('env', 'HS_WORKSPACE') }}"
  become: true
  tags:
    - rproxy

  vars:
    rproxy_nginx_managed_sites:
      - hashistack

  handlers:
    - name: Reload nginx service
      systemd:
        name: nginx
        state: reloaded
        enabled: true

  tasks:
    - name: Disable traffic
      include_role:
        name: "rtnp.galaxie_clans.rproxy"
      vars:
        rproxy_nginx_enable_sites: false
        rproxy_nginx_enable_streams: false

    - name: Render rproxy service configuration
      template:
        src: "hs.nginx.conf.j2"
        dest: "/etc/nginx/sites-available/hashistack.conf"
        mode: 0640
      notify: Reload nginx service

    - name: Render loki service configuration
      template:
        src: "loki.nginx.conf.j2"
        dest: "/etc/nginx/streams-available/loki.conf"
        mode: 0640
      notify: Reload nginx service

    - name: Enable traffic
      include_role:
        name: "rtnp.galaxie_clans.rproxy"
      vars:
        rproxy_nginx_enable_sites: true
        rproxy_nginx_enable_streams: true

    - name: "Extract bind update key fron conf file"  # noqa risky-shell-pipe
      shell: >-
        cat /etc/bind/keys/{{ hs_dns_key.name }}.conf
        | grep secret
        | cut -d '"' -f2
      register: tsig_key_sh

    - name: Variable cooking
      set_fact:
        tsig_key: "{{ tsig_key_sh.stdout }}"

    - name: Manage A record for nomad load balancers
      community.general.nsupdate:
        server: "{{ ansible_default_ipv4.address }}"
        zone: "{{ public_domain }}"
        key_name: "{{ hs_dns_key.name }}"
        key_secret: "{{ tsig_key }}"
        key_algorithm: "hmac-sha256"
        record: "apps"
        type: "A"
        ttl: 120
        value: "{{ (tf_action == 'apply') | ternary(hostvars['localhost'].apps_lb_ip, '') | default(omit) }}"
        state: "{{ (tf_action == 'destroy') | ternary('absent', 'present') }}"

    - name: "Sync dynamic record with zone file"
      command: >-
        rndc sync -clean {{ public_domain }} IN {{ _current_view_name }}
      loop: "{{ bind_views | map(attribute='name') | union(['default']) | unique | list }}"
      loop_control:
        loop_var: _current_view_name
