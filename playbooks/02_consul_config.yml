---
- name: Configure consul
  hosts: localhost
  become: false
  gather_facts: false

  vars:
    tf_module_name: "consul_config"

  pre_tasks:
    - name: Load group vars
      include_vars:
        dir: "{{ hs_workspace_group_vars_dir }}"
        ignore_unknown_extensions: true

  tasks:
    - name: Validate API avalability
      uri:
        url: "https://{{ consul_public_cluster_address }}/v1/agent/members"
        headers:
          X-Consul-Token: "{{ root_consul.SecretID }}"
        ca_path: "{{ consul_use_custom_ca | ternary(local_ca_certificate, '') | default(omit, true) }}"
      register: _consul_ping_api
      until: _consul_ping_api.status == 200
      retries: 30
      delay: 10

    - name: "Copy terraform sources"
      copy:
        src: "{{ tf_module_src }}"
        dest: "{{ tf_module_dest }}"
        mode: "u+rwX,g+rX,o-rX"

    - name: "COMMON - Do Terraform (can take up to 30 minutes)"
      community.general.terraform:
        project_path: "{{ tf_module_dest }}"
        state: "{{ (tf_action == 'destroy') | ternary('absent', 'present') }}"    # noqa args
        force_init: true
        provider_upgrade: true
        workspace: "{{ hs_workspace }}"
        variables:
          consul_address: "{{ consul_public_cluster_address }}"
          datacenter: "{{ hs_workspace }}"
          token: "{{ root_consul.SecretID }}"
          ca_file: "{{ consul_use_custom_ca | ternary(local_ca_certificate, '') | default(omit, true) }}"
      register: tf_result

    - name: Generate host_vars for public_ns
      copy:
        dest: "{{ hs_workspace_secrets_dir }}/tf_consul_config.yml"
        mode: 0600
        content: |-
          ---
          consul_connect_token_server: "{{ tf_result.outputs.consul_acl_nomad_server_token.value }}"
          consul_connect_token_client: "{{ tf_result.outputs.consul_acl_nomad_client_token.value }}"
          consul_prometheus_token: "{{ tf_result.outputs.consul_acl_prometheus_token.value }}"
          consul_telemetry_token: "{{ tf_result.outputs.consul_acl_telemetry_token.value }}"
          consul_promtail_token: "{{ tf_result.outputs.consul_acl_promtail_token.value }}"
          consul_acl_auto_encrypt_token: "{{ tf_result.outputs.consul_acl_minion_token.value }}"
          consul_nomad2vault_token: "{{ tf_result.outputs.consul_nomad2vault_token.value }}"
          consul_acl_vault_token: "{{ tf_result.outputs.consul_acl_vault_token.value }}"

- name: Register vault service into consul
  hosts: "hashistack_masters"
  become: true
  gather_facts: true
  tasks:
    - name: Create consul service definition
      copy:
        dest: "/etc/consul.d/service.vault.hcl"
        owner: consul
        group: consul
        mode: 0640
        content: |-
          service {
            name = "vault"
            port = 8200
            token = "{{ hostvars['localhost'].tf_result.outputs.consul_acl_vault_token.value }}"
            connect {
              sidecar_service { 
                proxy {
                  local_service_port = 8200
                } 
              }
            }
          }
      notify: Restart consul

    - name: Render system service env file
      copy:
        dest: "/etc/consul.d/sidecarvault.env"
        owner: consul
        group: consul
        mode: 0640
        content: |-
          CONSUL_HTTP_TOKEN="{{ hostvars['localhost'].tf_result.outputs.consul_acl_vault_token.value }}"
          CONSUL_HTTP_ADDR="https://{{ inventory_hostname }}.{{ public_domain }}:8501"
      notify: Restart sidecarvault


    - name: Render envoy systemd service
      copy:
        dest: "/lib/systemd/system/sidecarvault.service"
        owner: consul
        group: consul
        mode: 0640
        content: |-
          [Unit]
          Description=Consul ingress gateway for vault
          Requires=network-online.target
          After=network-online.target

          [Service]
          Restart=always
          EnvironmentFile=/etc/consul.d/sidecarvault.env
          ExecStart=/usr/bin/consul connect envoy -sidecar-for=vault -admin-bind=127.0.0.1:19001

          [Install]
          WantedBy=multi-user.target
      notify: Restart sidecarvault

    - name: Enable sidecarvault
      systemd:
        name: sidecarvault
        state: started
        daemon_reload: true
        enabled: true

    - name: Flush before leaving
      meta: flush_handlers

  handlers:
    - name: Restart sidecarvault
      systemd:
        name: sidecarvault
        state: restarted
        enabled: true

    - name: Restart consul
      systemd:
        name: consul
        state: restarted
        enabled: true

- name: Install an ingress gateway on minion host to connect to vault
  hosts: "hashistack_minions:hashistack_sre"
  become: true
  gather_facts: true

  roles:
    - consul

  tasks:
    - name: Render system service env file
      copy:
        dest: "/etc/consul.d/ingress-gateway-nomad2vault.env"
        owner: consul
        group: consul
        mode: 0640
        content: |-
          CONSUL_HTTP_TOKEN="{{ hostvars['localhost'].tf_result.outputs.consul_nomad2vault_token.value }}"
          CONSUL_HTTP_ADDR="https://{{ inventory_hostname }}.{{ public_domain }}:8501"
      notify: Restart nomad2vault

    - name: Render envoy systemd service
      copy:
        dest: "/lib/systemd/system/nomad2vault.service"
        owner: consul
        group: consul
        mode: 0640
        content: |-
          [Unit]
          Description=Consul ingress gateway for vault
          Requires=network-online.target
          After=network-online.target

          [Service]
          Restart=always
          EnvironmentFile=/etc/consul.d/ingress-gateway-nomad2vault.env
          ExecStart=/usr/bin/consul connect envoy -register -gateway=ingress -service=nomad2vault

          [Install]
          WantedBy=multi-user.target
      notify: Restart nomad2vault

    - name: Enable nomad2vault
      systemd:
        name: nomad2vault
        state: started
        daemon_reload: true
        enabled: true

  handlers:
    - name: Restart nomad2vault
      systemd:
        name: nomad2vault
        state: restarted
        daemon_reload: true
        enabled: true
