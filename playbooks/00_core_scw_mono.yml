---
- name: Create hashistack mono server 
  hosts: localhost
  become: false
  gather_facts: false

  vars:
    tf_module_name: "core_scw_mono_server"

  tasks:
    - name: Import sanity checks
      import_tasks: "{{ playbook_dir }}/inc/_tf_sanity_checks.yml"

    - name: APPLY - Create a dedicated keypair
      community.crypto.openssh_keypair:
        path: "{{ hs_workspace_ssh_private_key_file }}"
        type: ed25519
      when: tf_action == 'apply'

    - name: DESTROY - Check for inventory
      ansible.builtin.stat:
        path: "{{ hs_workspace_root }}/inventory"
      register: _current_inventory_file
      when: tf_action == 'destroy'

    - name: DESTROY - Remove clan definition from inventory group
      blockinfile:
        path: "{{ hs_workspace_root }}/inventory"
        state: absent
        marker: "{{ tf_core_block_marker }}"
      when:
        - tf_action == 'destroy'
        - _current_inventory_file.stat.exists

    - name: DESTROY - Check for ssh config file
      ansible.builtin.stat:
        path: "{{ hs_workspace_root }}/ssh.cfg"
      register: _current_ssh_conf_file
      when: tf_action == 'destroy'

    - name: DESTROY - Remove clan configuration from ssh config file
      blockinfile:
        path: "{{ hs_workspace_root }}/ssh.cfg"
        state: absent
        marker: "{{ tf_core_block_marker }}"
      when:
        - tf_action == 'destroy'
        - _current_ssh_conf_file.stat.exists

    - name: APPLY - Copy terraform sources    # noqa risky-file-permissions
      copy:
        src: "{{ tf_module_src }}"
        dest: "{{ tf_module_dest }}"
      when: tf_action == 'apply'

    - name: COMMON - Check for terraform directory
      ansible.builtin.stat:
        path: "{{ tf_module_dest }}"
      register: tf_module

    - name: COMMON - Do Terraform
      community.general.terraform:
        project_path: "{{ tf_module_dest }}"
        state: "{{ (tf_action == 'destroy') | ternary('absent', 'present') }}"
        force_init: true
        workspace: "{{ hs_workspace }}"
        variables:
          ssh_public_key_file: "{{ hs_workspace_ssh_public_key_file }}"
      register: tf_result
      when: tf_module.stat.exists
      tags: tf

    - name: APPLY - Terraform output extract
      set_fact:
        mono_ipv4: "{{ tf_result.outputs.mono_ipv4.value }}"
        mono_ipv6: "{{ tf_result.outputs.mono_ipv6.value }}"
        mono_private_ipv4: "{{ tf_result.outputs.mono_private_ipv4.value }}"
        current_ssh_user: "{{ tf_result.outputs.raw_ssh_user.value }}"
      when: tf_action == 'apply'
      tags:
        - outputs

    - name: APPLY - Read ssh.cfg
      shell: cat "{{ hs_workspace_root }}/ssh.cfg"
      register: ssh_cfg
      changed_when: false

    - name: APPLY - Add raw and ready host definitions to ssh config
      blockinfile:
        path: "{{ hs_workspace_root }}/ssh.cfg"
        state: present
        create: true
        mode: 0640
        marker: "{{ tf_core_block_marker }}"
        block: |
          {{ lookup('template', 'mono/_tf_core_ssh_cfg.j2') }}
      when: 
        - tf_action == 'apply'
        - ssh_cfg.stdout.find('--playbooks/tf_core.yml--') == -1
      tags:
        - outputs

    - name: APPLY - Read inventory
      shell: cat "{{ hs_workspace_root }}/inventory"
      register: inventory
      changed_when: false

    - name: APPLY - Add raw and ready host definitions to inventory group
      blockinfile:
        path: "{{ hs_workspace_root }}/inventory"
        state: present
        create: true
        mode: 0640
        marker: "{{ tf_core_block_marker }}"
        block: |
          {{ lookup('template', 'mono/_tf_core_inventory.j2') }}
      when: 
        - tf_action == 'apply'
        - inventory.stdout.find('--playbooks/tf_core.yml--') == -1
      tags:
        - outputs

    - name: APPLY - Render host vars
      template:
        src: "mono/_tf_core.vars.j2"
        dest: "{{ hs_workspace_group_vars_dir }}/tf_{{ tf_module_name }}.yml"
        mode: 0640
      when: tf_action == 'apply'
      tags:
        - outputs

    - name: DESTROY - Clean output files
      file:
        path: "{{ _current_garbaged_file }}"
        state: absent
      loop:
        - "{{ hs_workspace_group_vars_dir }}"
        - "{{ hs_workspace_sre_group_vars_dir }}"
        - "{{ hs_workspace_host_vars_dir }}"
      loop_control:
        loop_var: _current_garbaged_file
      when: tf_action == 'destroy'
