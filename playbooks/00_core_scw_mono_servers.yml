---
- hosts: localhost
  become: false
  gather_facts: false

  vars:
    tf_module_name: "core_scw_mono_server"
    ssh_private_key_file: "{{ hs_workspace_secrets_dir }}/{{ hs_workspace }}.key"
    ssh_public_key_file: "{{ ssh_private_key_file }}.pub"

  tasks:
    - name: Import sanity checks
      import_tasks: "{{ playbook_dir }}/inc/_tf_sanity_checks.yml"

    - name: APPLY - Create a dedicated keypair
      community.crypto.openssh_keypair:
        path: "{{ ssh_private_key_file }}"
        type: ed25519
      when: tf_action == 'apply'

    - name: DESTROY - Check for inventory
      ansible.builtin.stat:
        path: "{{ hs_workspace_root }}/hosts"
      register: _current_inventory_file
      when: tf_action == 'destroy'

    - name: DESTROY - Remove clan definition from inventory group
      blockinfile:
        path: "{{ hs_workspace_root }}/hosts"
        state: absent
        marker: "{{ tf_core_block_marker }}"
      when:
        - tf_action == 'destroy'
        - _current_inventory_file.stat.exists

    - name: DESTROY - Check for ssh config file
      ansible.builtin.stat:
        path: "{{ hs_workspace_root }}/ssh.cfg"
      register: _current_ssh_conf_file
      when: tf_action == 'destroy'

    - name: DESTROY - Remove clan configuration from ssh config file
      blockinfile:
        path: "{{ hs_workspace_root }}/ssh.cfg"
        state: absent
        marker: "{{ tf_core_block_marker }}"
      when:
        - tf_action == 'destroy'
        - _current_ssh_conf_file.stat.exists

    - name: APPLY - Copy terraform sources    # noqa risky-file-permissions
      copy:
        src: "{{ tf_module_src }}"
        dest: "{{ tf_module_dest }}"
      when: tf_action == 'apply'

    - name: COMMON - Do Terraform
      community.general.terraform:
        project_path: "{{ tf_module_dest }}"
        state: "{{ (tf_action == 'destroy') | ternary('absent', 'present') }}"
        force_init: true
        workspace: "{{ hs_workspace }}"
        variables:
          ssh_public_key_file: >-
            {{ ssh_public_key_file }}
      register: tf_result
      tags: tf

    - name: APPLY - Terraform output extract
      set_fact:
        mono_ipv4: "{{ tf_result.outputs.mononode_ipv4.value }}"
        mono_ipv6: "{{ tf_result.outputs.mononode_ipv6.value }}"
        current_ssh_user: "{{ tf_result.outputs.raw_ssh_user.value }}"
      when: tf_action == 'apply'
      tags:
        - outputs

    - name: APPLY - Add raw and ready host definitions to ssh config
      blockinfile:
        path: "{{ hs_workspace_root }}/ssh.cfg"
        state: present
        create: true
        mode: 0640
        marker: "{{ tf_core_block_marker }}"
        block: |
          {{ lookup('template', '_tf_core_mono_ssh_cfg.j2') }}
      when: tf_action == 'apply'
      tags:
        - outputs

    - name: APPLY - Add raw and ready host definitions to inventory group
      blockinfile:
        path: "{{ hs_workspace_root }}/hosts"
        state: present
        create: true
        mode: 0640
        marker: "{{ tf_core_block_marker }}"
        block: |
          {{ lookup('template', '_tf_core_mono_inventory.j2') }}
      when: tf_action == 'apply'
      tags:
        - outputs

    - name: APPLY - Render host vars
      template:
        src: "_tf_core_mono.vars.j2"
        dest: "{{ hs_workspace_group_vars_dir }}/tf_{{ tf_module_name }}_mono.yml"
        mode: 0640
      when: tf_action == 'apply'
      tags:
        - outputs

    - name: DESTROY - Clean output files
      file:
        path: "{{ _current_garbaged_file }}"
        state: absent
      loop:
        - "{{ hs_workspace_group_vars_dir }}/tf_core.yml"
        - "{{ hs_workspace_group_vars_dir }}/tf_core.tmp.yml"
        - "{{ hs_workspace_secrets_dir }}/unseal.yml"
        - "{{ hs_workspace_secrets_dir }}/root_consul.yml"
        - "{{ hs_workspace_secrets_dir }}/tf_vault_config.yml"
        - "{{ hs_workspace_secrets_dir }}/tf_consul_config.yml"
        - "{{ hs_workspace_secrets_dir }}/ca.cert.key"
        - "{{ hs_workspace_secrets_dir }}/self.cert.key"
        - "{{ hs_workspace_secrets_dir }}/self.cert.pem"
        - "{{ hs_workspace_secrets_dir }}/self.fullchain.cert.pem"
        - "{{ hs_workspace_tf_modules_dir }}"
      loop_control:
        loop_var: _current_garbaged_file
      when: tf_action == 'destroy'
